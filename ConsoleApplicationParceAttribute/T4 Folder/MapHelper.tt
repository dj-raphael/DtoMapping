<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="C:\Program Files (x86)\Common Files\microsoft shared\MSEnv\PublicAssemblies\envdte.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<# 
    // create an instance of the MapHelperClass class so 
    // that it is accessible from everywhere within the template
    this.MapHelper = new MapHelperClass(this.Host);
#><#+
/// <summary>
/// Object that provides functionality for automating Visual Studio.
/// </summary>
public MapHelperClass MapHelper;

/// <summary>
/// This class provides functionality for automating Visual Studio.
/// </summary>
public class MapHelperClass 
{
        
    /// <summary>
    /// Creates a new instance of this class
    /// </summary>
    public MapHelperClass(object host) : this()
    {
        // store a reference to the template host
        // we will need this frequently
        this.Host = host as ITextTemplatingEngineHost;
    }
    
    private EnvDTE.DTE _DTE = null;
    /// <summary>
    /// Returns a reference to the primary management object of Visual Studio
    /// <summary>
    public EnvDTE.DTE DTE
    {
        get
        {
            if (_DTE == null)
            {
                var hostServiceProvider = this.Host as IServiceProvider;
                if (hostServiceProvider != null)
                    _DTE = hostServiceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
            }
            return _DTE;
        }
    }
    
    /// <summary>
    /// Stores a reference to the Host of the t4 template
    /// </summary>
    public ITextTemplatingEngineHost Host { get; private set; }

    public string MapExtensionClassName { get; set; }

    public List<string> DoProjects { get; set; }
    public List<string> DtoProjects { get; set; }
    
    public MapHelperClass()
    {
        DoProjects = new List<string>();
        DtoProjects = new List<string>();
    }
    
    public string MapAttribute { get; set; }
    public string MapIgnoreAttribute { get; set; }

    public string DoSuffix { get; set; }
    public string DtoSuffix { get; set; }

    public Dictionary<string,string[]> SystemNullableTypes = new Dictionary<string,string[]>
    {
        {"int", new string[]{"int?", "System.Int32?", "System.Nullable<int>", "System.Nullable<System.Int32>"}},
        {"System.Int32",new string[]{"int?", "System.Int32?", "System.Nullable<int>", "System.Nullable<System.Int32>"}},

        {"short", new string[]{"short?", "System.Int16?", "System.Nullable<short>", "System.Nullable<System.Int16>"}},
        {"System.Int16", new string[]{"short?", "System.Int16?", "System.Nullable<short>", "System.Nullable<System.Int16>"}},

        {"long", new string[]{"long?", "System.Int64?", "System.Nullable<long>", "System.Nullable<System.Int64>"}},
        {"System.Int64", new string[]{"long?", "System.Int64?", "System.Nullable<long>", "System.Nullable<System.Int64>"}},

        {"decimal", new string[]{"decimal?", "System.Decimal?", "System.Nullable<decimal>", "System.Nullable<System.Decimal>"}},
        {"System.Decimal", new string[]{"decimal?", "System.Decimal?", "System.Nullable<decimal>", "System.Nullable<System.Decimal>"}},
        
        {"float", new string[]{"float?", "System.Single?", "System.Nullable<float>", "System.Nullable<System.Single>"}},
        {"System.Single", new string[]{"float?", "System.Single?", "System.Nullable<float>", "System.Nullable<System.Single>"}},
        
        {"double", new string[]{"double?", "System.Double?", "System.Nullable<double>", "System.Nullable<System.Double>"}},
        {"System.Double", new string[]{"double?", "System.Double?", "System.Nullable<double>", "System.Nullable<System.Double>"}},

        {"bool", new string[]{"bool?", "System.Boolean?", "System.Nullable<bool>", "System.Nullable<System.Boolean>"}},
        {"System.Boolean", new string[]{"bool?", "System.Boolean?", "System.Nullable<bool>", "System.Nullable<System.Boolean>"}},

        {"byte", new string[]{"byte?", "System.Byte?", "System.Nullable<byte>", "System.Nullable<System.Byte>"}},
        {"System.Byte", new string[]{"byte?", "System.Byte?", "System.Nullable<byte>", "System.Nullable<System.Byte>"}},

        {"Guid", new string[]{"Guid?", "System.Guid?", "System.Nullable<Guid>", "System.Nullable<System.Guid>"}},
        {"System.Guid", new string[]{"Guid?", "System.Guid?", "System.Nullable<Guid>", "System.Nullable<System.Guid>"}},

        {"char", new string[]{"char?", "System.Char?", "System.Nullable<char>", "System.Nullable<System.Char>"}},
        {"System.Char", new string[]{"char?", "System.Char?", "System.Nullable<char>", "System.Nullable<System.Char>"}},

        {"DateTime", new string[]{"DateTime?", "System.DateTime?", "System.Nullable<DateTime>", "System.Nullable<System.DateTime>"}},
        {"System.DateTime", new string[]{"DateTime?", "System.DateTime?", "System.Nullable<DateTime>", "System.Nullable<System.DateTime>"}},

        {"sbyte", new string[]{"sbyte?", "System.SByte?", "System.Nullable<sbyte>", "System.Nullable<System.SByte>"}},
        {"System.SByte", new string[]{"sbyte?", "System.SByte?", "System.Nullable<sbyte>", "System.Nullable<System.SByte>"}},

        {"uint", new string[]{"uint?", "System.UInt32?", "System.Nullable<uint>", "System.Nullable<System.UInt32>"}},
        {"System.UInt32", new string[]{"uint?", "System.UInt32?", "System.Nullable<uint>", "System.Nullable<System.UInt32>"}},

        {"ulong", new string[]{"ulong?", "System.UInt64?", "System.Nullable<ulong>", "System.Nullable<System.UInt64>"}},
        {"System.UInt64", new string[]{"ulong?", "System.UInt64?", "System.Nullable<ulong>", "System.Nullable<System.UInt64>"}},

        {"ushort", new string[]{"ushort?", "System.UInt16?", "System.Nullable<ushort>", "System.Nullable<System.UInt16>"}},
        {"System.UInt16", new string[]{"ushort?", "System.UInt16?", "System.Nullable<ushort>", "System.Nullable<System.UInt16>"}},
    };

    public bool IsInNullableDictionary(string systemtype, string nullableType)
    {
        var nullableCollectionValue =  SystemNullableTypes.FirstOrDefault(x => x.Key.ToString().Trim() == systemtype).Value;
        
        if(nullableCollectionValue != null)
        {
            var nullableCollection  = nullableCollectionValue.ToList();
            if(nullableCollection.FirstOrDefault(x => x == nullableType) != null)
                return true;
        }

        return false;
    }

    public string GetMapName(CodeElement element)
    {
        var value = element.Name;
        const string nameProperty = "Name";

        CodeElements attributes = null;

        var codeClass = element as CodeClass;
        if (codeClass != null)
        {
            attributes = codeClass.Attributes;
        }

        var codeProperty = element as CodeProperty;
        if (codeProperty != null)
        {
            attributes = codeProperty.Attributes;
        }

        foreach (CodeAttribute ca in attributes)
        {
            if (ca.Name.Contains(MapAttribute) && ca.Value.Contains(nameProperty))
            {
                value = ca.Value.Remove(0, ca.Value.IndexOf(nameProperty));
                value = value.Replace(" ", "");

                if (value.Contains(",")) 
                {
                    value = value.Remove(value.IndexOf(","));
                }

                value = value.Remove(0, nameProperty.Length + 1);
                value = value.Replace("\"", "").ToLower();

                if(DoSuffix != null && codeClass != null)
                {
                    if (value.EndsWith(DoSuffix.ToLower()))
                    {
                        value = value.Replace(DoSuffix.ToLower(), "");
                    }
                }

                if(DtoSuffix != null && codeClass != null)
                {
                    if (value.EndsWith(DtoSuffix.ToLower()))
                    {
                        value = value.Replace(DtoSuffix.ToLower(), "");
                    }
                }
            }
        }
        
        value = value.ToLower();

        if(DoSuffix != null && codeClass != null)
        {
            if (value.EndsWith(DoSuffix.ToLower()))
            {
                value = value.Replace(DoSuffix.ToLower(), "");
            }
        }

        if(DtoSuffix != null && codeClass != null)
        {
            if (value.EndsWith(DtoSuffix.ToLower()))
            {
                value = value.Replace(DtoSuffix.ToLower(), "");
            }
        }
            
        return value;
    }

    public bool CompareTwoPropertyType(CodeProperty DOCodeProperty, CodeProperty DtoCodeProperty, List<MapDtoAndDo> similarClasses)
    {
        var DOType = DOCodeProperty.Type.AsString;
        var DtoType = DtoCodeProperty.Type.AsString;


        if (DOType.Contains("IEnumerable") && DtoType.Contains("IEnumerable"))
        {
            DOType = DOType.Remove(0, DOType.IndexOf("<") + 1);
            DOType = DOType.Replace(">", "");

            DtoType = DtoType.Remove(0, DtoType.IndexOf("<") + 1);
            DtoType = DtoType.Replace(">", "");
            
            if(CompareInMapDtoAndDoCollection(DOType,DtoType,similarClasses)) 
                return true;
        }

        if(CompareInMapDtoAndDoCollection(DOType,DtoType,similarClasses)) 
            return true;

        if (DOType == DtoType)
        {
            return true;
        }

        return false;
    }

    public bool CompareInMapDtoAndDoCollection (string DOType, string DtoType, List<MapDtoAndDo> similarClasses)
    {
        var similarInterfacesDO = similarClasses.Where(x => x.DOInterface != null).FirstOrDefault(x => x.DOInterface.FullName == DOType);
        var similarInterfacesDto = similarClasses.Where(x => x.DtoInterface != null).FirstOrDefault(x => x.DtoInterface.FullName == DtoType);
        var checkingMapClass = new MapDtoAndDo();

        checkingMapClass = similarClasses.FirstOrDefault(x => x.DOClass.FullName == DOType);
        if (checkingMapClass != null && checkingMapClass == similarClasses.FirstOrDefault(x => x.DtoClass.FullName == DtoType))
        {
            return true;
        }

        similarInterfacesDO = similarClasses.Where(x => x.DOInterface != null).FirstOrDefault(x => x.DOInterface.FullName == DOType);
        similarInterfacesDto = similarClasses.Where(x => x.DtoInterface != null).FirstOrDefault(x => x.DtoInterface.FullName == DtoType);

        if(similarInterfacesDO != null && similarInterfacesDO == similarClasses.FirstOrDefault(x => x.DtoClass.FullName == DtoType))
        {
            return true;
        }

        if(similarInterfacesDto != null && similarClasses.FirstOrDefault(x => x.DOClass.FullName == DOType) == similarInterfacesDto)
        {
            return true;
        }

        if(similarInterfacesDO != null && similarInterfacesDO == similarInterfacesDto)
        {
            return true;
        }

        return false;
    }

    public KindOfProperty GetKindOfMapProperty(CodeProperty codeProperty, List<MapDtoAndDo> listOfSimilarClasses)
    {
        var type = codeProperty.Type.AsString;

        if (type.Contains("IEnumerable"))
        {
            type = type.Remove(0, type.IndexOf("<") + 1);
            type = type.Replace(">", "");

            if (listOfSimilarClasses.Any(x => x.DOClass.FullName == type) || listOfSimilarClasses.Where(x => x.DOInterface != null).Any(x => x.DOInterface.FullName == type)) 
            {
               return KindOfProperty.CollectionAttributeClasses;
            }

            if (listOfSimilarClasses.Any(x => x.DtoClass.FullName == type) || listOfSimilarClasses.Where(x => x.DtoInterface != null).Any(x => x.DtoInterface.FullName == type)) 
            {
               return KindOfProperty.CollectionAttributeClasses;
            }
        }

        if (listOfSimilarClasses.Any(x => x.DOClass.FullName == type) || listOfSimilarClasses.Where(x => x.DOInterface != null).Any(x => x.DOInterface.FullName == type)) 
        {
            return KindOfProperty.AttributeClass;
        }
        
        if (listOfSimilarClasses.Any(x => x.DtoClass.FullName == type) || listOfSimilarClasses.Where(x => x.DtoInterface != null).Any(x => x.DtoInterface.FullName == type)) 
        {
            return KindOfProperty.AttributeClass;
        }

        return KindOfProperty.None;
    }
}

 public void GenerateMap(MapHelperClass MapHelper)
    {

        if(MapHelper.MapAttribute == null || MapHelper.MapAttribute == "") 
        {
            MapHelper.MapAttribute = "Map";
        }

        if(MapHelper.MapIgnoreAttribute == null || MapHelper.MapIgnoreAttribute == "") 
        {
            MapHelper.MapIgnoreAttribute = "MapIgnore";
        }

        if(MapHelper.DoProjects == null || MapHelper.DoProjects.Count() == 0 )
        {
            throw new Exception("List of DoProjects doesn't exist");
        }

        if(MapHelper.DtoProjects == null || MapHelper.DtoProjects.Count() == 0 )
        {
            throw new Exception("List of DtoProjects doesn't exist");
        }

        if(MapHelper.MapExtensionClassName == null || MapHelper.MapExtensionClassName == "")
        {
            throw new Exception("Name of Generated Class wasn't set");
        }

        if(MapHelper.MapAttribute == null || MapHelper.MapAttribute == "")
        {
            throw new Exception("Attribute for Mapping doesn't exist");
        }

        var classesWithMapAttribute = new List<CodeClass>();
        var classesWithMapAttributeDto = new List<CodeClass>(); 
 
        foreach(string project in MapHelper.DoProjects)
        {
            classesWithMapAttribute = VisualStudioHelper.GetClassesByAttributeName(MapHelper.MapAttribute,project);
        }

        foreach(string project in MapHelper.DtoProjects)
        {
            classesWithMapAttributeDto = VisualStudioHelper.GetClassesByAttributeName(MapHelper.MapAttribute,project);
        }

    #>

namespace ConsoleApplicationParceAttribute.T4_Folder
{
    public static class <#= MapHelper.MapExtensionClassName #> 
    {
    <#+
        var listOfSimilarClasses = new List<MapDtoAndDo>();
        var isPairFounded = false;
            while (classesWithMapAttribute.Any())
            {
                isPairFounded = false;

                CodeClass doClass = classesWithMapAttribute.First();
                foreach (CodeClass dtoClass in classesWithMapAttributeDto)
                {
                    CodeInterface doInterface = null;
                    CodeInterface dtoInterface = null;

                    if (MapHelper.GetMapName((CodeElement)doClass) == MapHelper.GetMapName((CodeElement)dtoClass))
                    {
                        foreach(CodeInterface ce in doClass.ImplementedInterfaces)  
                        {
                              if(ce.Name.IndexOf("I") == 0 && doClass.Name == ce.Name.Remove(0,1))
                              {
                                 doInterface = ce;
                              }
                        }

                        foreach(CodeInterface ce in dtoClass.ImplementedInterfaces)  
                        {
                              if(ce.Name.IndexOf("I") == 0 && dtoClass.Name == ce.Name.Remove(0,1))
                              {
                                 dtoInterface = ce;
                              }
                        }

                        listOfSimilarClasses.Add(new MapDtoAndDo
                        {
                            DOClass = doClass,
                            DtoClass = dtoClass,
                            DOInterface = doInterface,
                            DtoInterface = dtoInterface
                        });

                        classesWithMapAttributeDto.Remove(dtoClass);
                        isPairFounded = true;
                        break;
                    }
                }
                classesWithMapAttribute.Remove(doClass);
                if (!isPairFounded)  #><#= "\r\n//" + doClass.FullName#><#+
            }
            foreach(var dtoClass in classesWithMapAttributeDto) 
            {
                #> <#= "\r\n//" + dtoClass.FullName#> <#+
            }

            foreach(var similarClass in listOfSimilarClasses) 
            { 
                var allProperties = VisualStudioHelper.GetAllCodeElementsOfType(similarClass.DOClass.Members, vsCMElement.vsCMElementProperty, true);
                var CECollection = similarClass.DOClass.Bases;
                foreach(CodeClass ce in CECollection)  allProperties.AddRange(VisualStudioHelper.GetAllCodeElementsOfType(ce.Members, vsCMElement.vsCMElementProperty, true));

                var allPropertiesDto = VisualStudioHelper.GetAllCodeElementsOfType(similarClass.DtoClass.Members, vsCMElement.vsCMElementProperty, true);
                CECollection = similarClass.DtoClass.Bases;
                foreach(CodeClass ce in CECollection)  allPropertiesDto.AddRange(VisualStudioHelper.GetAllCodeElementsOfType(ce.Members, vsCMElement.vsCMElementProperty, true));

                var allMethods = VisualStudioHelper.GetAllCodeElementsOfType(similarClass.DOClass.Members, vsCMElement.vsCMElementFunction, true);
                foreach(CodeClass ce in CECollection)  allMethods.AddRange(VisualStudioHelper.GetAllCodeElementsOfType(ce.Members, vsCMElement.vsCMElementFunction, true));

                var allMethodsDto = VisualStudioHelper.GetAllCodeElementsOfType(similarClass.DtoClass.Members, vsCMElement.vsCMElementFunction, true);
                foreach(CodeClass ce in CECollection)  allMethodsDto.AddRange(VisualStudioHelper.GetAllCodeElementsOfType(ce.Members, vsCMElement.vsCMElementFunction, true));

                var listOfSimilarProperties = new List<MapPropertiesDtoAndDo>();

                while (allProperties.Any())
                {
                    CodeProperty codeProperty = (CodeProperty) allProperties.First();

                    foreach (CodeProperty dtoCodeProperty in allPropertiesDto)
                    {
                        var attrIgnoreDo = new AttributeAndPropeperties();
                            attrIgnoreDo = null;
                        var attrIgnoreDto = new AttributeAndPropeperties();
                            attrIgnoreDto = null;

                        if(MapHelper.MapIgnoreAttribute != null && MapHelper.MapIgnoreAttribute != "")
                        { 
                            attrIgnoreDo = VisualStudioHelper.GetAttributesAndPropepertiesCollection((CodeElement)codeProperty).FirstOrDefault(x => x.Name == MapHelper.MapIgnoreAttribute);
                            attrIgnoreDto = VisualStudioHelper.GetAttributesAndPropepertiesCollection((CodeElement)dtoCodeProperty).FirstOrDefault(x => x.Name == MapHelper.MapIgnoreAttribute);
                        }

                        if(MapHelper.GetMapName((CodeElement) codeProperty) == MapHelper.GetMapName((CodeElement) dtoCodeProperty))
                        {
                            var doPropertyName = codeProperty.Name;
                            var dtoPropertyName = dtoCodeProperty.Name;

                            AttributeAndPropeperties attrDo = VisualStudioHelper.GetAttributesAndPropepertiesCollection((CodeElement)codeProperty).FirstOrDefault(x => x.Name == MapHelper.MapAttribute);
                            AttributeAndPropeperties attrDto = VisualStudioHelper.GetAttributesAndPropepertiesCollection((CodeElement)dtoCodeProperty).FirstOrDefault(x => x.Name == MapHelper.MapAttribute);

                            var FunctionFromDto = attrDto != null ? attrDto.GetParameterByKeyName("FunctionFrom") : null;
                            var FunctionFrom = attrDo != null ? attrDo.GetParameterByKeyName("FunctionFrom") : null;
                            var FunctionToDto = attrDto != null ? attrDto.GetParameterByKeyName("FunctionTo") : null;
                            var FunctionTo = attrDo != null ? attrDo.GetParameterByKeyName("FunctionTo") : null;

                            var FromDtoFunction = "";
                            var ToDtoFunction = "";

                            if(FunctionFromDto != null)
                            {
                                if(FunctionTo != null)
                                { 
                                    if(FunctionFromDto != FunctionTo)
                                    {
                                           throw new Exception("In the pair: " + similarClass.DOClass.Name + " " + similarClass.DtoClass.Name + " was occured exception. Check pair " + dtoCodeProperty.Name + " " + codeProperty.Name + " properties");
                                    }
                                }

                                FromDtoFunction = FunctionFromDto;
                            } 
                            else
                            {
                                if(FunctionTo != null)
                                {
                                    FromDtoFunction = FunctionTo;
                                }
                            }

                            if(FunctionToDto != null)
                            {
                                if(FunctionFrom != null)
                                {
                                    if(FunctionToDto != FunctionFrom)
                                    {
                                        throw new Exception("In the pair: " + similarClass.DOClass.Name + " " + similarClass.DtoClass.Name + " was occured exception. Check pair " + dtoCodeProperty.Name + " " + codeProperty.Name + " properties");
                                    }
                                }

                                ToDtoFunction = FunctionToDto;
                            }
                            else
                            {
                                if(FunctionFrom != null)
                                {
                                    ToDtoFunction = FunctionFrom;
                                }
                            }

                            if(!MapHelper.CompareTwoPropertyType(codeProperty, dtoCodeProperty, listOfSimilarClasses) && ToDtoFunction == "" && FromDtoFunction == "")
                            {
                                if(MapHelper.IsInNullableDictionary(codeProperty.Type.AsString, dtoCodeProperty.Type.AsString))
                                {
                                      FromDtoFunction =  "item." + codeProperty.Name + " = " + "itemDto." + dtoCodeProperty.Name + ".HasValue ? itemDto." + dtoCodeProperty.Name + ".Value : default(" + codeProperty.Type.AsString + ")";
                                      ToDtoFunction =  "itemDto." + dtoCodeProperty.Name + " = " + "item." +  codeProperty.Name;
                                }
                        
                                if(MapHelper.IsInNullableDictionary(dtoCodeProperty.Type.AsString, codeProperty.Type.AsString))
                                {
                                      ToDtoFunction =  "itemDto." + dtoCodeProperty.Name + " = " + "item." + codeProperty.Name + ".HasValue ? item." + codeProperty.Name + ".Value : default(" + dtoCodeProperty.Type.AsString + ")";
                                      FromDtoFunction =  "item." + codeProperty.Name + " = " + "itemDto." + dtoCodeProperty.Name;
                                }
                            }

                            var isSetterDO = VisualStudioHelper.IsExistSetterInCodeProperty(codeProperty);
                            var isSetterDto = VisualStudioHelper.IsExistSetterInCodeProperty(dtoCodeProperty);
                            bool ignoreBySetter = false;

                            if(!isSetterDO || !isSetterDto)
                            {    
                                foreach(var cf in allMethods)
                                {
                                    var codeFunction = cf as CodeFunction;
                                    if(codeFunction != null)
                                    {
                                        if(codeFunction.Name.IndexOf("Set") == 0 && codeFunction.Name.Replace("Set", "") == codeProperty.Name)
                                        {
                                            if(MapHelper.GetKindOfMapProperty(dtoCodeProperty, listOfSimilarClasses) == KindOfProperty.CollectionAttributeClasses)
                                            {
                                                FromDtoFunction = "item." + codeFunction.Name + "(itemDto." + dtoCodeProperty.Name + ".Select(x => x.MapFromDto()))";
                                            }

                                            if(MapHelper.GetKindOfMapProperty(dtoCodeProperty, listOfSimilarClasses) == KindOfProperty.AttributeClass)
                                            {
                                                FromDtoFunction = "item." + codeFunction.Name + "(itemDto." + dtoCodeProperty.Name + ".MapFromDto())";
                                            }

                                            if(MapHelper.GetKindOfMapProperty(dtoCodeProperty, listOfSimilarClasses) == KindOfProperty.None)
                                            {
                                                FromDtoFunction = "item." + codeFunction.Name + "(itemDto." + dtoCodeProperty.Name + ")";
                                            }
                                        }
                                    }
                                }

                                foreach(var cf in allMethodsDto)
                                {
                                    var codeFunction = cf as CodeFunction;
                                    if(codeFunction != null)
                                    {
                                        if(codeFunction.Name.IndexOf("Set") == 0 && codeFunction.Name.Replace("Set", "") == dtoCodeProperty.Name)
                                        {
                                            if(MapHelper.GetKindOfMapProperty(codeProperty, listOfSimilarClasses) == KindOfProperty.CollectionAttributeClasses)
                                            {
                                                ToDtoFunction = "itemDto." + codeFunction.Name + "(item." + codeProperty.Name + ".Select(x => x.MapToDto()))";
                                            }

                                            if(MapHelper.GetKindOfMapProperty(codeProperty, listOfSimilarClasses) == KindOfProperty.AttributeClass)
                                            {
                                                ToDtoFunction = "itemDto." + codeFunction.Name + "(item." + codeProperty.Name + ".MapToDto())";
                                            }

                                            if(MapHelper.GetKindOfMapProperty(codeProperty, listOfSimilarClasses) == KindOfProperty.None)
                                            {
                                                ToDtoFunction = "itemDto." + codeFunction.Name + "(item." + codeProperty.Name + ")";
                                            }
                                        }
                                    }
                                }
                            }
                    
                            if (MapHelper.CompareTwoPropertyType(codeProperty, dtoCodeProperty, listOfSimilarClasses) || ToDtoFunction != "" || FromDtoFunction != "") 
                            {
                                var kindOfProperty = MapHelper.GetKindOfMapProperty(codeProperty, listOfSimilarClasses);

                                if(ToDtoFunction == "" && FromDtoFunction == "" ) 
                                {
                                    if(kindOfProperty == KindOfProperty.AttributeClass )
                                    {
                                        ToDtoFunction = "itemDto." + dtoCodeProperty.Name + " = " + "item." + codeProperty.Name + ".MapToDto()";
                                        FromDtoFunction = "item." + codeProperty.Name + " = " + "itemDto." +  dtoCodeProperty.Name + ".MapFromDto()";
                                    }
                                    else 
                                    {
                                        if(kindOfProperty == KindOfProperty.CollectionAttributeClasses) 
                                        {
                                            ToDtoFunction = "itemDto." + dtoCodeProperty.Name + " = " + "item." + codeProperty.Name + ".Select(x => x.MapToDto())";
                                            FromDtoFunction = "item." + codeProperty.Name + " = " + "itemDto." +  dtoCodeProperty.Name + ".Select(x => x.MapFromDto())";
                                        }
                                        else  
                                        {
                                            ToDtoFunction = "itemDto." + dtoCodeProperty.Name + " = " + "item." + codeProperty.Name;
                                            FromDtoFunction = "item." + codeProperty.Name + " = " + "itemDto." +  dtoCodeProperty.Name;
                                        }
                                    }
                                }

                                if( attrIgnoreDo == null && attrIgnoreDto == null && !ignoreBySetter)
                                {
                                    listOfSimilarProperties.Add(new MapPropertiesDtoAndDo 
                                    {
                                        DOPropertyName = codeProperty,
                                        DTOPropertyName = dtoCodeProperty,
                                        DOPropertyType = codeProperty.Type,
                                        DtoropertyType = dtoCodeProperty.Type,
                                        KindOMapfProperty = kindOfProperty,
                                        FromDtoFunction = FromDtoFunction,
                                        ToDtoFunction = ToDtoFunction
                                    });
                                }

                                allPropertiesDto.Remove((CodeElement)dtoCodeProperty); 
                                break;
                            }
                        }
                    }
                    allProperties.Remove((CodeElement)codeProperty);
                }

                similarClass.MapPropertiesDtoAndDo = listOfSimilarProperties;

    #>    
        public static <#= similarClass.DtoInterface == null ? similarClass.DtoClass.FullName : similarClass.DtoInterface.FullName #> MapToDto (this <#= similarClass.DOInterface == null ? similarClass.DOClass.FullName : similarClass.DOInterface.FullName #> item)
        {  
            if (item == null) return null;
            
            var itemDto = new <#= similarClass.DtoClass.FullName #> ();
<#+         foreach(MapPropertiesDtoAndDo property in similarClass.MapPropertiesDtoAndDo)
            { 
                if(property.ToDtoFunction != "" ) 
                {
#>               <#= property.ToDtoFunction #>;
<#+            }
            } #>

            return itemDto;
        }

        public static <#= similarClass.DOInterface == null ? similarClass.DOClass.FullName : similarClass.DOInterface.FullName #> MapFromDto (this <#= similarClass.DtoInterface == null ? similarClass.DtoClass.FullName : similarClass.DtoInterface.FullName #> itemDto)
        {  
            if (itemDto == null) return null;
            
            var item =  new <#= similarClass.DOClass.FullName #> ();
<#+          foreach(MapPropertiesDtoAndDo property in similarClass.MapPropertiesDtoAndDo)
            { 
                if(property.FromDtoFunction != "" )
                {
#>                 <#= property.FromDtoFunction #>;
<#+             }
            } #>
            
            return item;
        }
    <#+  } #>
    }
}
<#+  }

    public class MapDtoAndDo
    {
        public CodeClass DOClass { get; set; }
        public CodeClass DtoClass { get; set; }
        public CodeInterface DOInterface { get; set; }
        public CodeInterface DtoInterface { get; set; }
        public IEnumerable<MapPropertiesDtoAndDo> MapPropertiesDtoAndDo { get; set; }
    }

    public class MapPropertiesDtoAndDo
    {
        public CodeProperty DOPropertyName { get; set; }
        public CodeProperty DTOPropertyName { get; set; }
        public CodeTypeRef DOPropertyType { get; set; }
        public CodeTypeRef DtoropertyType { get; set; }
        public string ToDtoFunction { get; set; }
        public string FromDtoFunction { get; set; }
        public KindOfProperty KindOMapfProperty { get; set; }
    }

    public enum KindOfProperty
    {
        AttributeClass = 1,
        CollectionAttributeClasses = 2,
        FunctionAttribute = 3,
        None = 9
    }

#>