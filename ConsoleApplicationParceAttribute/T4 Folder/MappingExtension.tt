<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="VisualStudioHelper.tt" #>
<#@ include file="MapHelper.tt"#>
<#@ import namespace="System.Linq" #>

using System.Linq;

namespace ConsoleApplicationParceAttribute.T4_Folder  
{ 
     public static class MappingExtension
     { 
<#
    var listOfSimilarClasses = new List<MapDtoAndDo>();
    var typeDto = "";
    var typeDO = "";

    var classesWithMapAttribute = VisualStudioHelper.GetClassesByAttributeName("Map", "DataObject");
    var classesWithMapAttributeDto = VisualStudioHelper.GetClassesByAttributeName("Map", "DataTransferObject");

    var isPairFounded = false;
    while (classesWithMapAttribute.Any())
    {
        isPairFounded = false;

        CodeClass doClass = classesWithMapAttribute.First();
        foreach (CodeClass dtoClass in classesWithMapAttributeDto)
        {
            CodeInterface doInterface = null;
            CodeInterface dtoInterface = null;

            if (MapHelper.GetMapName((CodeElement)doClass) == MapHelper.GetMapName((CodeElement)dtoClass))
            {
                foreach(CodeInterface ce in doClass.ImplementedInterfaces)  
                {
                      if(ce.Name.IndexOf("I") == 0 && doClass.Name == ce.Name.Remove(0,1))
                      {
                         doInterface = ce;
                      }
                }

                foreach(CodeInterface ce in dtoClass.ImplementedInterfaces)  
                {
                      if(ce.Name.IndexOf("I") == 0 && dtoClass.Name == ce.Name.Remove(0,1))
                      {
                         dtoInterface = ce;
                      }
                }

                listOfSimilarClasses.Add(new MapDtoAndDo
                {
                    DOClass = doClass,
                    DtoClass = dtoClass,
                    DOInterface = doInterface,
                    DtoInterface = dtoInterface
                });

                classesWithMapAttributeDto.Remove(dtoClass);
                isPairFounded = true;
                break;
            }
        }
        classesWithMapAttribute.Remove(doClass);
        if (!isPairFounded)  #><#= "\r\n//" + doClass.FullName#><#
    }
    foreach(var dtoClass in classesWithMapAttributeDto) 
    {
        #> <#= "\r\n//" + dtoClass.FullName#> <#
    }

    foreach(var similarClass in listOfSimilarClasses) 
    { 
        var allProperties = VisualStudioHelper.GetAllCodeElementsOfType(similarClass.DOClass.Members, vsCMElement.vsCMElementProperty, true);
        var CECollection = similarClass.DOClass.Bases;
        foreach(CodeClass ce in CECollection)  allProperties.AddRange(VisualStudioHelper.GetAllCodeElementsOfType(ce.Members, vsCMElement.vsCMElementProperty, true));

        var allPropertiesDto = VisualStudioHelper.GetAllCodeElementsOfType(similarClass.DtoClass.Members, vsCMElement.vsCMElementProperty, true);
        CECollection = similarClass.DtoClass.Bases;
        foreach(CodeClass ce in CECollection)  allPropertiesDto.AddRange(VisualStudioHelper.GetAllCodeElementsOfType(ce.Members, vsCMElement.vsCMElementProperty, true));

        var allMethods = VisualStudioHelper.GetAllCodeElementsOfType(similarClass.DOClass.Members, vsCMElement.vsCMElementFunction, true);
        foreach(CodeClass ce in CECollection)  allMethods.AddRange(VisualStudioHelper.GetAllCodeElementsOfType(ce.Members, vsCMElement.vsCMElementFunction, true));

        var allMethodsDto = VisualStudioHelper.GetAllCodeElementsOfType(similarClass.DtoClass.Members, vsCMElement.vsCMElementFunction, true);
        foreach(CodeClass ce in CECollection)  allMethodsDto.AddRange(VisualStudioHelper.GetAllCodeElementsOfType(ce.Members, vsCMElement.vsCMElementFunction, true));

        var listOfSimilarProperties = new List<MapPropertiesDtoAndDo>();

        while (allProperties.Any())
        {
            CodeProperty codeProperty = (CodeProperty) allProperties.First();

            foreach (CodeProperty dtoCodeProperty in allPropertiesDto)
            {
                AttributeAndPropeperties attrIgnoreDo = VisualStudioHelper.GetAttributesAndPropepertiesCollection((CodeElement)codeProperty).FirstOrDefault(x => x.Name == "MapIgnore");
                AttributeAndPropeperties attrIgnoreDto = VisualStudioHelper.GetAttributesAndPropepertiesCollection((CodeElement)dtoCodeProperty).FirstOrDefault(x => x.Name == "MapIgnore");

                if(MapHelper.GetMapName((CodeElement) codeProperty) == MapHelper.GetMapName((CodeElement) dtoCodeProperty))
                {
                    var doPropertyName = codeProperty.Name;
                    var dtoPropertyName = dtoCodeProperty.Name;

                    AttributeAndPropeperties attrDo = VisualStudioHelper.GetAttributesAndPropepertiesCollection((CodeElement)codeProperty).FirstOrDefault(x => x.Name == "Map");
                    AttributeAndPropeperties attrDto = VisualStudioHelper.GetAttributesAndPropepertiesCollection((CodeElement)dtoCodeProperty).FirstOrDefault(x => x.Name == "Map");

                    var FunctionFromDto = attrDto != null ? attrDto.GetParameterByKeyName("FunctionFrom") : null;
                    var FunctionFrom = attrDo != null ? attrDo.GetParameterByKeyName("FunctionFrom") : null;
                    var FunctionToDto = attrDto != null ? attrDto.GetParameterByKeyName("FunctionTo") : null;
                    var FunctionTo = attrDo != null ? attrDo.GetParameterByKeyName("FunctionTo") : null;

                    var FromDtoFunction = "";
                    var ToDtoFunction = "";

                    if(FunctionFromDto != null)
                    {
                        if(FunctionTo != null)
                        { 
                            if(FunctionFromDto != FunctionTo)
                            {
                                   throw new Exception("In the pair: " + similarClass.DOClass.Name + " " + similarClass.DtoClass.Name + " was occured exception. Check pair " + dtoCodeProperty.Name + " " + codeProperty.Name + " properties");
                            }
                        }

                        FromDtoFunction = FunctionFromDto;
                    } 
                    else
                    {
                        if(FunctionTo != null)
                        {
                            FromDtoFunction = FunctionTo;
                        }
                    }

                    if(FunctionToDto != null)
                    {
                        if(FunctionFrom != null)
                        {
                            if(FunctionToDto != FunctionFrom)
                            {
                                throw new Exception("In the pair: " + similarClass.DOClass.Name + " " + similarClass.DtoClass.Name + " was occured exception. Check pair " + dtoCodeProperty.Name + " " + codeProperty.Name + " properties");
                            }
                        }

                        ToDtoFunction = FunctionToDto;
                    }
                    else
                    {
                        if(FunctionFrom != null)
                        {
                            ToDtoFunction = FunctionFrom;
                        }
                    }

                    if(!MapHelper.CompareTwoPropertyType(codeProperty, dtoCodeProperty, listOfSimilarClasses) && ToDtoFunction == "" && FromDtoFunction == "")
                    {
                        if(MapHelper.IsInNullableDictionary(codeProperty.Type.AsString, dtoCodeProperty.Type.AsString))
                        {
                              FromDtoFunction =  "item." + codeProperty.Name + " = " + "itemDto." + dtoCodeProperty.Name + ".HasValue ? itemDto." + dtoCodeProperty.Name + ".Value : default(" + codeProperty.Type.AsString + ")";
                              ToDtoFunction =  "itemDto." + dtoCodeProperty.Name + " = " + "item." +  codeProperty.Name;
                        }
                        
                        if(MapHelper.IsInNullableDictionary(dtoCodeProperty.Type.AsString, codeProperty.Type.AsString))
                        {
                              ToDtoFunction =  "itemDto." + dtoCodeProperty.Name + " = " + "item." + codeProperty.Name + ".HasValue ? item." + codeProperty.Name + ".Value : default(" + dtoCodeProperty.Type.AsString + ")";
                              FromDtoFunction =  "item." + codeProperty.Name + " = " + "itemDto." + dtoCodeProperty.Name;
                        }
                    }

                    var isSetterDO = VisualStudioHelper.IsExistSetterInCodeProperty(codeProperty);
                    var isSetterDto = VisualStudioHelper.IsExistSetterInCodeProperty(dtoCodeProperty);
                    bool ignoreBySetter = false;

                    if(!isSetterDO || !isSetterDto)
                    {    
                        foreach(var cf in allMethods)
                        {
                            var codeFunction = cf as CodeFunction;
                            if(codeFunction != null)
                            {
                                if(codeFunction.Name.IndexOf("Set") == 0 && codeFunction.Name.Replace("Set", "") == codeProperty.Name)
                                {
                                    if(MapHelper.GetKindOfMapProperty(dtoCodeProperty, listOfSimilarClasses) == KindOfProperty.CollectionAttributeClasses)
                                    {
                                        FromDtoFunction = "item." + codeFunction.Name + "(itemDto." + dtoCodeProperty.Name + ".Select(x => x.MapFromDto()))";
                                    }

                                    if(MapHelper.GetKindOfMapProperty(dtoCodeProperty, listOfSimilarClasses) == KindOfProperty.AttributeClass)
                                    {
                                        FromDtoFunction = "item." + codeFunction.Name + "(itemDto." + dtoCodeProperty.Name + ".MapFromDto())";
                                    }

                                    if(MapHelper.GetKindOfMapProperty(dtoCodeProperty, listOfSimilarClasses) == KindOfProperty.None)
                                    {
                                        FromDtoFunction = "item." + codeFunction.Name + "(itemDto." + dtoCodeProperty.Name + ")";
                                    }
                                }
                            }
                        }

                        foreach(var cf in allMethodsDto)
                        {
                            var codeFunction = cf as CodeFunction;
                            if(codeFunction != null)
                            {
                                if(codeFunction.Name.IndexOf("Set") == 0 && codeFunction.Name.Replace("Set", "") == dtoCodeProperty.Name)
                                {
                                    if(MapHelper.GetKindOfMapProperty(codeProperty, listOfSimilarClasses) == KindOfProperty.CollectionAttributeClasses)
                                    {
                                        ToDtoFunction = "itemDto." + codeFunction.Name + "(item." + codeProperty.Name + ".Select(x => x.MapToDto()))";
                                    }

                                    if(MapHelper.GetKindOfMapProperty(codeProperty, listOfSimilarClasses) == KindOfProperty.AttributeClass)
                                    {
                                        ToDtoFunction = "itemDto." + codeFunction.Name + "(item." + codeProperty.Name + ".MapToDto())";
                                    }

                                    if(MapHelper.GetKindOfMapProperty(codeProperty, listOfSimilarClasses) == KindOfProperty.None)
                                    {
                                        ToDtoFunction = "itemDto." + codeFunction.Name + "(item." + codeProperty.Name + ")";
                                    }
                                }
                            }
                        }
                    }
                    

                    if (MapHelper.CompareTwoPropertyType(codeProperty, dtoCodeProperty, listOfSimilarClasses) || ToDtoFunction != "" || FromDtoFunction != "") 
                    {
                        var kindOfProperty = MapHelper.GetKindOfMapProperty(codeProperty, listOfSimilarClasses);

                        if(ToDtoFunction == "" && FromDtoFunction == "" ) 
                        {
                            if(kindOfProperty == KindOfProperty.AttributeClass )
                            {
                                ToDtoFunction = "itemDto." + dtoCodeProperty.Name + " = " + "item." + codeProperty.Name + ".MapToDto()";
                                FromDtoFunction = "item." + codeProperty.Name + " = " + "itemDto." +  dtoCodeProperty.Name + ".MapFromDto()";
                            }
                            else 
                            {
                                if(kindOfProperty == KindOfProperty.CollectionAttributeClasses) 
                                {
                                    ToDtoFunction = "itemDto." + dtoCodeProperty.Name + " = " + "item." + codeProperty.Name + ".Select(x => x.MapToDto())";
                                    FromDtoFunction = "item." + codeProperty.Name + " = " + "itemDto." +  dtoCodeProperty.Name + ".Select(x => x.MapFromDto())";
                                }
                                else  
                                {
                                    ToDtoFunction = "itemDto." + dtoCodeProperty.Name + " = " + "item." + codeProperty.Name;
                                    FromDtoFunction = "item." + codeProperty.Name + " = " + "itemDto." +  dtoCodeProperty.Name;
                                }
                            }
                        }

                        if( attrIgnoreDo == null && attrIgnoreDto == null && !ignoreBySetter)
                        {
                            listOfSimilarProperties.Add(new MapPropertiesDtoAndDo 
                            {
                                DOPropertyName = codeProperty,
                                DTOPropertyName = dtoCodeProperty,
                                DOPropertyType = codeProperty.Type,
                                DtoropertyType = dtoCodeProperty.Type,
                                KindOMapfProperty = kindOfProperty,
                                FromDtoFunction = FromDtoFunction,
                                ToDtoFunction = ToDtoFunction
                            });
                        }

                        allPropertiesDto.Remove((CodeElement)dtoCodeProperty); 
                        break;
                    }
                }
            }
            allProperties.Remove((CodeElement)codeProperty);
        }

        similarClass.MapPropertiesDtoAndDo = listOfSimilarProperties;

    #>    
        public static <#= similarClass.DtoInterface == null ? similarClass.DtoClass.FullName : similarClass.DtoInterface.FullName #> MapToDto (this <#= similarClass.DOInterface == null ? similarClass.DOClass.FullName : similarClass.DOInterface.FullName #> item)
        {  
           if (item == null) return null;
            
           var itemDto = new <#= similarClass.DtoClass.FullName #> ();
<#         foreach(MapPropertiesDtoAndDo property in similarClass.MapPropertiesDtoAndDo)
           { 
              if(property.ToDtoFunction != "" ) 
              {
#>               <#= property.ToDtoFunction #>;
<#            }
           } #>

           return itemDto;
        }

        public static <#= similarClass.DOInterface == null ? similarClass.DOClass.FullName : similarClass.DOInterface.FullName #> MapFromDto (this <#= similarClass.DtoInterface == null ? similarClass.DtoClass.FullName : similarClass.DtoInterface.FullName #> itemDto)
        {  
            if (itemDto == null) return null;
            
            var item =  new <#= similarClass.DOClass.FullName #> ();
<#          foreach(MapPropertiesDtoAndDo property in similarClass.MapPropertiesDtoAndDo)
            { 
               if(property.FromDtoFunction != "" )
               {
#>                 <#= property.FromDtoFunction #>;
<#             }
            } #>
            
            return item;
        }
 <#  } #>
    }
}